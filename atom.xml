<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://feiling4.github.io</id>
    <title>波粒二象性</title>
    <updated>2023-10-21T07:01:42.732Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://feiling4.github.io"/>
    <link rel="self" href="https://feiling4.github.io/atom.xml"/>
    <subtitle>妙，你是我进步的动力！
-----------
温故而知新</subtitle>
    <logo>https://feiling4.github.io/images/avatar.png</logo>
    <icon>https://feiling4.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 波粒二象性</rights>
    <entry>
        <title type="html"><![CDATA[C语言编写规范]]></title>
        <id>https://feiling4.github.io/post/c-yu-yan-bian-xie-gui-fan/</id>
        <link href="https://feiling4.github.io/post/c-yu-yan-bian-xie-gui-fan/">
        </link>
        <updated>2023-10-18T03:31:12.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>title: 'C语言编写规范'<br>
date: 2023-10-18 11:31:12<br>
tags: [嵌入式,C语言,规范]</p>
<p>起：2023年10月18日11:45:46<br>
版本信息：<br>
V1.00    初版    2023年10月20日11:13:36</p>
<p>V1.01：新增注释规则   2023年10月21日14:51:57</p>
<p><ul class="markdownIt-TOC">
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E4%B8%80-%E6%96%87%E4%BB%B6%E8%A7%84%E8%8C%83">一、文件规范</a>
<ul>
<li><a href="#11-c%E6%96%87%E4%BB%B6%E8%A7%84%E8%8C%83">1.1 C文件规范</a></li>
<li><a href="#12-h%E6%96%87%E4%BB%B6%E8%A7%84%E8%8C%83">1.2 H文件规范</a>
<ul>
<li><a href="#121-h%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84">1.2.1 H文件结构</a></li>
<li><a href="#122-%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E8%A7%84%E8%8C%83">1.2.2  函数声明规范</a></li>
<li><a href="#123-%E5%A4%B4%E6%96%87%E4%BB%B6%E5%BC%95%E7%94%A8%E8%A7%84%E8%8C%83">1.2.3 头文件引用规范</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%BA%8C-%E5%87%BD%E6%95%B0%E8%A7%84%E8%8C%83">二、函数规范</a>
<ul>
<li><a href="#21-%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83">2.1 函数说明注释规范</a></li>
<li><a href="#22-%E5%87%BD%E6%95%B0%E5%90%8D%E7%A7%B0%E8%A7%84%E8%8C%83">2.2 函数名称规范</a>
<ul>
<li><a href="#221-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%91%BD%E5%90%8D%E6%B3%95">2.2.1 常用函数命名法</a></li>
<li><a href="#223-%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%84%E8%8C%83">2.2.3 我使用的规范</a></li>
</ul>
</li>
<li><a href="#23-%E5%87%BD%E6%95%B0%E5%86%85%E5%8F%98%E9%87%8F%E8%A7%84%E8%8C%83">2.3 函数内变量规范</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89-%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E8%A7%84%E8%8C%83">三、全局变量规范</a></li>
<li><a href="#%E5%9B%9B-%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99%E9%A3%8E%E6%A0%BC%E8%A7%84%E8%8C%83">四、程序编写风格规范</a>
<ul>
<li><a href="#41-%E7%BC%A9%E8%BF%9B%E8%A7%84%E8%8C%83">4.1 缩进规范</a></li>
<li><a href="#42-%E7%A9%BA%E8%A1%8C%E8%A7%84%E8%8C%83">4.2 空行规范</a></li>
</ul>
</li>
<li><a href="#%E4%BA%94-%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83">五、注释规范</a>
<ul>
<li><a href="#%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A">代码注释</a></li>
</ul>
</li>
<li><a href="#%E5%85%AD-%E7%96%91%E6%83%91%E5%BE%85%E8%A7%A3">六、疑惑，待解</a></li>
</ul>
(目录)</p>
<h1 id="前言">前言</h1>
<p>实话实说，我目前这一点，做的不是很好，经常随心所欲的命名函数和中间变量。<br>
因此，借着这次总结，好好规范一下自己。</p>
<h1 id="一-文件规范">一、文件规范</h1>
<h2 id="11-c文件规范">1.1 C文件规范</h2>
<p>一个c文件，只对一个驱动或者一个功能，不做混用。并且，底层和应用层一定要分开。<br>
例如，SPI驱动的OLED屏幕。SPI驱动封装为一个c文件，OLED的应用驱动封装为一个C文件，这样可以保证移植的灵活性，底层改变，但是函数接口没有变化，我就只需要改变底层驱动函数内部，和OLED驱动文件没有关系。<br>
或者OLED驱动需要新增一个具体功能，只需要新增就好，不会改动到SPI。</p>
<p>特别是：因为SPI驱动可以驱动很多设备，可以在很多项目上使用，可以直接把SPI的驱动文件移植到新项目上，不需要去删除OLED 屏幕驱动的部分。</p>
<p>另外：确实也有看见把应用部分和底层驱动封装在同一个C文件内的，目前是遇到过一次，是墨水屏驱动，因为使用的是模拟的SPI通讯，所以就封装在同一个文件内，方便使用者直接改引脚，去做模拟通讯，省去了驱动部分的移植。</p>
<h2 id="12-h文件规范">1.2 H文件规范</h2>
<h3 id="121-h文件结构">1.2.1 H文件结构</h3>
<p>H文件的结构说明如下：</p>
<ul>
<li>文件说明注释，作者信息</li>
<li>#ifndef  _xxx_H</li>
<li>#define _xxx_H</li>
<li>引用相对应/需要的头文件</li>
<li>#define    变量</li>
<li>枚举  enum</li>
<li>结构体</li>
<li>变量/全局变量声明</li>
<li>函数声明【static】</li>
<li>函数声明【extern】</li>
<li>#endif</li>
</ul>
<h3 id="122-函数声明规范">1.2.2  函数声明规范</h3>
<p>函数声明分为static 修饰和extern修饰。<br>
如果只是当前的C文件使用，不对外，那用static修饰。<br>
如果会在外部其他C文件内使用，或者main函数使用，需要使用extern修饰。</p>
<h3 id="123-头文件引用规范">1.2.3 头文件引用规范</h3>
<p>有两种方式：<br>
- 第一种：每个文件只引用需要的文件<br>
- 第二种：用一个include头文件包含项目中使用的所有头文件，其他C文件全部引用include</p>
<p>两种其实都可以，主要是使用场景不同。每个只引用需要的文件，移植以及排查问题，能比较方便。<br>
通过一个文件来管理，适合项目框架比较稳定的情况下，每一次只是改IO，应用层，不需要改动到结构，那么头文件也是不需要改变的，加了新外设驱动，也只是在include中添加引用。</p>
<p>目前我是第二种用的比较多些。这样造成的问题是，单独的驱动移植的时候，需要判断一下需要的头文件是什么。除非是直接在项目工程上，直接去改成新项目，移除不需要的驱动，添加新驱动。</p>
<h1 id="二-函数规范">二、函数规范</h1>
<h2 id="21-函数说明注释规范">2.1 函数说明注释规范</h2>
<p>函数需要有一个函数说明，维护好的话，可以不看具体内容或者看函数名称，就能明白这个函数的主要功能是什么，输入输出是什么。提高代码的阅读效率。</p>
<p>我目前使用是一个小脚本，在keil中使用之后，会自动生成函数说明部分，然后按照需求，自己修改内容。默认生成的效果如下，函数名称会自己改变，作者信息可以通过改变模板文件来实现，其实整个模板都是可以改变的，只是我没有这个需求，我觉得这样目前就能满足自己的需求。</p>
<pre><code class="language-c">/**
  ************************************************************************** 
  ** -------------------------------------------------------------------- **
  ** @name          : EXTI9_5_IRQHandler
  ** @brief         : None
  ** @param         : None
  ** @retval        : None
  ** @author        : ZCC
  ** -------------------------------------------------------------------- **
  ** @attention     : None
  ** -------------------------------------------------------------------- **
  ************************************************************************** 
**/
</code></pre>
<p>脚本信息可以在CSDN或者论坛或者B站等搜到，我就不放连接了，我也是从这些地方找到的，可以搜索  keil自动注释，或者keil脚本。很多这类的文章，包含很多的脚本，比如格式化对齐等，感谢“前人”的无私分享，我们这些“后人”，才能越用越方便。</p>
<h2 id="22-函数名称规范">2.2 函数名称规范</h2>
<h3 id="221-常用函数命名法">2.2.1 常用函数命名法</h3>
<p>常用命名方法：<br>
- 匈牙利命名法<br>
- 骆驼命名法<br>
- 帕斯卡命名法</p>
<p>具体的，可以百度一下或者论坛找找说明</p>
<p>简单说明：<br>
<strong>匈牙利命名法</strong>：<br>
主要思想是在函数，变量前，加入前缀，来增加对程序的理解<br>
具体实现：标识符以一个或者多个小写字母作为前缀，后跟首字母大写的一个或者多个单词的组合，这个单词主要指明变量的用途</p>
<p><strong>骆驼命名法</strong>：<br>
混合使用大小写。<br>
具体实现：第一个单词首字母小写，其他单词首字母大写。</p>
<pre><code class="language-c">例如：printEmployeePaychecks()，函数名中每一个逻辑断点都有一个大写字母来标记。
</code></pre>
<p><strong>帕斯卡命名法</strong>：<br>
所有单词的首字母大写。</p>
<pre><code class="language-c">例如：DisplayInfo()和UserName都是采用了帕斯卡命名法。
</code></pre>
<h3 id="223-我使用的规范">2.2.3 我使用的规范</h3>
<p>函数使用<strong>帕斯卡命名法</strong>，函数名称所有单词的首字母大写，命名使用最好能体现函数功能。</p>
<p>函数名<br>
<strong>设备名_操作名( )</strong>，用下划线分割小写字母</p>
<pre><code class="language-c"> 例如：Tic_Init()   Adc_Is_Busy()   Uart_Tx_Char()
 例如：Tic_Init()   Adc_IsBusy()   Uart_TxChar()  【比较规范的写法】
</code></pre>
<h2 id="23-函数内变量规范">2.3 函数内变量规范</h2>
<p>总的<strong>变量</strong>命名规则：<strong>函数内变量使用小写字母</strong><br>
- 函数内的<strong>临时变量</strong>：用temp，如果有多个且特殊的，可以按照实际的需求，编写单词。<br>
- 函数内的<strong>静态变量</strong>：static修饰的变量，用s_xxx来命名。<br>
- 函数内的<strong>常量</strong>：使用大写字母，声明的同时用const修饰【const int XXX = 100;//也可写成：int const XXX = 100;】</p>
<h1 id="三-全局变量规范">三、全局变量规范</h1>
<p><strong>全局变量</strong>使用规范：<br>
- 使用g_xxx来命名 【觉得最好是 g_文件名_xxx来命名。这样直接管理到变量是哪个文件中的定义】</p>
<h1 id="四-程序编写风格规范">四、程序编写风格规范</h1>
<h2 id="41-缩进规范">4.1 缩进规范</h2>
<p>首行缩进，固定为4个空格；keil中，可以调整tap键表示的空格数。<br>
下一级嵌套函数，再缩进4个空格。</p>
<h2 id="42-空行规范">4.2 空行规范</h2>
<p>空行规范：<br>
- 变量定义和代码之间，空一行。<br>
- 逻辑代码块之间，空一行，区分上下逻辑<br>
- keil自带bug，文件的最后必须有一行，否则报错【居然一直没有修复】</p>
<h1 id="五-注释规范">五、注释规范</h1>
<h2 id="代码注释">代码注释</h2>
<pre><code>    代码注释最大的用处是：今后阅读更加方便。
</code></pre>
<p>原因是：<br>
- <strong>遗忘</strong>。写完代码的三天内，记性很好，不用看源码都能说清楚代码逻辑，超过三天，那就忘了。这时候，虽然知道函数的功能，但是和其他人battle的时候，问你具体实现过程，你就容易说错或者忘记。<br>
- <strong>提高修改效率</strong>。根据代码块的功能做注释，可以马上定位到有异常或者需要修改的代码段。<br>
- <strong>后期维护效率</strong>。公司级的代码，因为项目组的不同（大公司当然不一样，中小公司，都是一个软件对几个项目），后续测试和需求，往往是延迟的，等几天之后，和你说这个功能有异常，去维护的时候，需要尽快了解之前的代码执行逻辑。<br>
- 通过函数名，返回值，参数等注释信息，确定函数功能。<br>
- 通过函数内的代码注释去了解代码逻辑。</p>
<h1 id="六-疑惑待解">六、疑惑，待解</h1>
<p>如何保证自己写的代码质量呢？<br>
有什么检查方法？<br>
或者有什么思维方式？</p>
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?cb0e797a461f8a2fbd655645afbf4a55";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微机组成]]></title>
        <id>https://feiling4.github.io/post/wei-ji-zu-cheng/</id>
        <link href="https://feiling4.github.io/post/wei-ji-zu-cheng/">
        </link>
        <updated>2023-10-17T07:28:30.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>title: '微机组成'<br>
date: 2023-10-17 15:28:30<br>
tags: [嵌入式,微机原理]</p>
<p>如果文章内容有误，请留言</p>
<blockquote>
<p>本文发布在个人博客，请勿转载，如有需求，请联系作者<br>
<a href="https://feiling4.github.io/">博客地址：</a>  可直接点击访问 https://feiling4.github.io/</p>
</blockquote>
<p><ul class="markdownIt-TOC">
<li><a href="#%E4%B8%80-%E5%BE%AE%E6%9C%BA%E7%9A%84%E6%A6%82%E5%BF%B5">一、微机的概念</a></li>
<li><a href="#%E4%BA%8C-%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%A1%8C%E4%B8%9A%E7%9A%84%E5%BE%AE%E6%9C%BA">二、嵌入式行业的微机</a>
<ul>
<li><a href="#%E5%8D%95%E7%89%87%E6%9C%BA%E6%9E%84%E6%88%90">单片机构成</a></li>
<li><a href="#%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B">程序执行过程</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89-%E5%BE%AE%E6%9C%BA%E7%9A%84%E6%9E%84%E6%88%90%E6%9A%82%E6%97%B6%E4%B8%8D%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3">三、微机的构成【暂时不需要了解】</a>
<ul>
<li><a href="#%E6%9E%84%E6%88%90">构成</a></li>
<li><a href="#%E5%90%84%E9%83%A8%E5%88%86%E7%9A%84%E4%BD%9C%E7%94%A8">各部分的作用</a></li>
</ul>
</li>
<li><a href="#%E5%9B%9B-%E5%92%8C%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E7%96%91%E6%83%91">四、和嵌入式相关的一些疑惑</a>
<ul>
<li><a href="#%E7%A8%8B%E5%BA%8F%E4%B8%8B%E8%BD%BD%E5%9C%A8%E5%93%AA%E9%87%8C">程序下载在哪里</a></li>
<li><a href="#%E7%A8%8B%E5%BA%8F%E5%9C%A8%E5%93%AA%E9%87%8C%E6%89%A7%E8%A1%8C">程序在哪里执行</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81%E5%8D%A0%E7%94%A8%E7%A9%BA%E9%97%B4%E7%9A%84%E5%A4%A7%E5%B0%8F">如何查看代码占用空间的大小</a>
<ul>
<li><a href="#ram%E7%A9%BA%E9%97%B4">RAM空间</a></li>
<li><a href="#rom%E7%A9%BA%E9%97%B4">ROM空间</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%BA%94-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B">五、数据存储类型</a>
<ul>
<li><a href="#%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F">小端模式</a></li>
<li><a href="#%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F">大端模式</a></li>
</ul>
</li>
<li><a href="#%E5%85%AD-%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F%E5%B7%A5%E4%BD%9C%E4%B8%AD%E6%B2%A1%E6%9C%89%E6%8E%A5%E8%A7%A6%E5%88%B0%E6%9A%82%E7%A9%BA">六、寻址方式【工作中没有接触到，暂空】</a></li>
<li><a href="#%E4%B8%83-%E5%A3%B0%E6%98%8E">七、声明</a></li>
</ul>
(目录)</p>
<h1 id="一-微机的概念">一、微机的概念</h1>
<p>微机和微处理器的区别：<br>
微处理器（芯片）：只是处理和控制部分<br>
微机：是一个完整的计算机系统，有处理和控制功能。<br>
包括：</p>
<ul>
<li>微处理器</li>
<li>存储器</li>
<li>接口适配器</li>
<li>通用IO</li>
</ul>
<h1 id="二-嵌入式行业的微机">二、嵌入式行业的微机</h1>
<h2 id="单片机构成">单片机构成</h2>
<p>单片机：</p>
<ul>
<li>处理器</li>
<li>RAM</li>
<li>ROM</li>
<li>I/O</li>
<li>等电路集成在一块芯片上</li>
</ul>
<p>现在的单片机都是内核+外围电路，构成。内核由专门的内核公司生产，其他芯片公司，在内核上搭建他们自己需要的外围单片机电路，所以现在有很多的单片机类型：低功耗，入门级等</p>
<h2 id="程序执行过程">程序执行过程</h2>
<p>上电后，会先初始化堆栈空间，堆栈空间是C语言执行的前提。初始化后，在程序计数器PC（指令地址寄存器）存入第一条要执行的指令的内存地址，也就是程序的起始地址。之后每执行一条指令，程序寄存器PC值自动+1，推动整个程序的执行。如果涉及到函数跳转，条件选择等，本质上就是修改PC里面的地址值，让内核去执行对应的指令，这样程序从完全线性，变成了可选分支的线性。</p>
<p>为什么说堆栈控制是C语言执行的前提？</p>
<p>堆栈空间分为堆和栈。不是一个东西。具体待完善！！！！</p>
<p>函数执行中的局部变量，函数传递的实参，形参，函数的返回地址，返回值等，都需要保存在堆栈空间内。通过程序指针PC的配合，去移动程序执行的顺序，在跳转和执行中，上一个函数的地址和状态，需要进行保存【类似中断的现场保护，但是不是完全相同】</p>
<h1 id="三-微机的构成暂时不需要了解">三、微机的构成【暂时不需要了解】</h1>
<h2 id="构成">构成</h2>
<h2 id="各部分的作用">各部分的作用</h2>
<h1 id="四-和嵌入式相关的一些疑惑">四、和嵌入式相关的一些疑惑</h1>
<h2 id="程序下载在哪里">程序下载在哪里</h2>
<p>程序下载到flash中，现在flash（闪存）被ROM（read only memory）替代。但是数据手册里，内存一章，还是用的flash大小，来表示。</p>
<p><strong>ROM</strong>：只读存储器，<strong>掉电保存</strong>，所以用来保存代码。提供指令和程序<br>
<strong>RAM</strong>：随机访问存储器，<strong>掉电不保存</strong>，访问速度快，所以用来保存相关的变量参数值。提供变量暂存的空间</p>
<h2 id="程序在哪里执行">程序在哪里执行</h2>
<p>程序可以运行在RAM，flash里，根据启动方式的选择不同，会有不通的启动地址。</p>
<p>正常的模式，一般都是运行在flash中。执行过程为：</p>
<ul>
<li>初始化后，把第一条指令的地址，从ROM（flash）加载到程序寄存器PC中</li>
<li>处理器从PC获取到对应指令的操作数和操作码，进行执行</li>
<li>因为内核从flash中获取指令地址，所以可以说是执行在flash中</li>
<li>这个执行的过程的变量保存在RAM中，保存对应的参数和变量地址等</li>
</ul>
<p>【感觉讲的不够透彻，需要重新修改】！！！！</p>
<h2 id="如何查看代码占用空间的大小">如何查看代码占用空间的大小</h2>
<p>keil和Makefile，编译完成之后，都会生成一个map文件，该文件的最后一行，就是所占用的ROM和RAM大小。</p>
<p>下图为keil5，编译之后：<br>
<img src="https://img-blog.csdnimg.cn/f654c1a6233a4023933b0bfe54d32d31.jpeg#pic_center" alt="在这里插入图片描述" loading="lazy"></p>
<p>RW   Size大小，就是运行时，程序需要的RAM空间。<br>
ROM Size大小就是下载程序时，所占用的空间大小。</p>
<h3 id="ram空间">RAM空间</h3>
<p>RAM：随机访问存储器</p>
<p>RAM空间大小，表示程序运行时，可以使用的空间。例如64KB，表示程序运行中，堆栈空间，函数，变量，局部变量，全局变量，数组等，运行起来之后，最大只能占用这么大，如果超出，就会内存泄漏，导致单片机复位。</p>
<h3 id="rom空间">ROM空间</h3>
<p>ROM：只读存储器，用来保存代码</p>
<p>ROM大小，表示程序所能下载的大小，如512Kb，256Kb等。</p>
<p>对应的转化关系是：</p>
<ul>
<li>1K   ==  1024k</li>
<li>1Byte   ==  8bit</li>
</ul>
<p>此处需要做转化512Kb  = (512 / 8)KB  = 64KB。也就是说，该芯片，我最大能下64KB的bin文件。</p>
<h1 id="五-数据存储类型">五、数据存储类型</h1>
<p>【可以加上例子，例如哪些常用的单片机使用什么端的存储方式】！！！</p>
<h2 id="小端模式">小端模式</h2>
<p>高位数据在前，低位数据在后。</p>
<h2 id="大端模式">大端模式</h2>
<p>低位数据在前，高位数据在后。</p>
<h1 id="六-寻址方式工作中没有接触到暂空">六、寻址方式【工作中没有接触到，暂空】</h1>
<h1 id="七-声明">七、声明</h1>
<p>如果文章内容有误，请留言</p>
<blockquote>
<p>本文发布在个人博客，请勿转载，如有需求，请联系作者<br>
<a href="https://feiling4.github.io/">博客地址：</a>  可直接点击访问 https://feiling4.github.io/</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[嵌入式文章规划]]></title>
        <id>https://feiling4.github.io/post/qian-ru-shi-wen-zhang-gui-hua/</id>
        <link href="https://feiling4.github.io/post/qian-ru-shi-wen-zhang-gui-hua/">
        </link>
        <updated>2023-10-16T11:22:03.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>title: '嵌入式文章规划'<br>
date: 2023-10-16 19:22:03<br>
tags: [嵌入式]</p>
<p><ul class="markdownIt-TOC">
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E4%B8%80-%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86">一、基础部分</a>
<ul>
<li><a href="#11-c%E8%AF%AD%E8%A8%80%E6%9C%AA%E5%AE%8C%E6%88%90">1.1 C语言【未完成】</a></li>
<li><a href="#12-c%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83%E5%AE%8C%E6%88%90%E5%BE%85%E5%AE%8C%E5%96%84">1.2 C语言编写规范【完成，待完善】</a></li>
<li><a href="#13-%E7%BC%96%E8%AF%91%E5%99%A8%E6%9C%AA%E5%AE%8C%E6%88%90">1.3 编译器【未完成】</a></li>
<li><a href="#14-%E5%BE%AE%E6%9C%BA%E7%BB%84%E6%88%90%E5%AE%8C%E6%88%90%E5%BE%85%E5%AE%8C%E5%96%84">1.4 微机组成【完成，待完善】</a></li>
<li><a href="#15-%E5%B8%B8%E8%A7%81%E6%A6%82%E5%BF%B5%E6%9C%AA%E5%AE%8C%E6%88%90">1.5 常见概念【未完成】</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C-%E6%9F%A5%E6%89%BE%E8%B5%84%E6%96%99">二、查找资料</a>
<ul>
<li><a href="#21-%E8%8A%AF%E7%89%87datasheet%E6%9F%A5%E6%89%BE">2.1 芯片datasheet查找</a></li>
<li><a href="#22-mcu%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C%E6%9F%A5%E6%89%BE">2.2 MCU参考手册查找</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89-%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB">三、代码阅读</a>
<ul>
<li><a href="#31-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%BB%96%E4%BA%BA%E6%BA%90%E7%A0%81%E6%9C%AA%E5%AE%8C%E6%88%90">3.1 如何阅读他人源码【未完成】</a></li>
<li><a href="#32-%E5%A6%82%E4%BD%95%E6%95%B4%E7%90%86%E5%90%B8%E6%94%B6%E4%BB%96%E4%BA%BA%E6%BA%90%E7%A0%81%E6%9C%89%E7%94%A8%E7%9A%84%E9%83%A8%E5%88%86%E6%9C%AA%E5%AE%8C%E6%88%90">3.2 如何整理吸收他人源码有用的部分【未完成】</a></li>
</ul>
</li>
<li><a href="#%E5%9B%9B-mcu%E7%9B%B8%E5%85%B3">四、MCU相关</a>
<ul>
<li><a href="#41-mcu%E7%9A%84datasheet%E9%98%85%E8%AF%BB%E6%9C%AA%E5%AE%8C%E6%88%90">4.1 MCU的datasheet阅读【未完成】</a></li>
<li><a href="#42-mcu%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C%E9%98%85%E8%AF%BB%E5%92%8C%E4%BD%BF%E7%94%A8%E6%9C%AA%E5%AE%8C%E6%88%90">4.2 MCU参考手册阅读和使用【未完成】</a></li>
</ul>
</li>
<li><a href="#%E4%BA%94-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91">五、项目开发</a>
<ul>
<li><a href="#51-%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E5%AF%B9%E5%BA%94%E7%9A%84%E7%94%A8%E9%80%94%E6%9C%AA%E5%AE%8C%E6%88%90">5.1 项目文件夹和对应的用途【未完成】</a></li>
<li><a href="#52-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E6%9C%AA%E5%AE%8C%E6%88%90">5.2 项目开发流程【未完成】</a></li>
<li><a href="#53-%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E6%A8%A1%E6%9D%BF%E6%9C%AA%E5%AE%8C%E6%88%90">5.3 项目日志模板【未完成】</a></li>
<li><a href="#54-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E6%9C%AA%E5%AE%8C%E6%88%90">5.4 项目开发问题记录【未完成】</a></li>
<li><a href="#55-%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6%E6%8A%8A%E6%8F%A1%E6%9C%AA%E5%AE%8C%E6%88%90">5.5 项目进度把握【未完成】</a></li>
<li><a href="#56-%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3%E6%9C%AA%E5%AE%8C%E6%88%90">5.6 项目总结归纳【未完成】</a></li>
</ul>
</li>
<li><a href="#%E5%85%AD-pcb%E8%AE%BE%E8%AE%A1%E6%9C%AA%E5%AE%8C%E6%88%90">六、PCB设计【未完成】</a></li>
</ul>
(目录)</p>
<h1 id="前言">前言</h1>
<p>写这个专题的原因是：</p>
<ol>
<li>发现了一个叫做gridea的静态博客写作软件，想试试</li>
<li>最近有点迷茫，索性就把自己走的路，学过的东西，做个整理</li>
<li>试试自己新建的博客，欢迎大家访问：<a href="https://feiling4.github.io/">博客地址：</a></li>
<li>挑战一下，能不能一个月更新完成，再用一个月去完善修改</li>
<li>工作2年了，一直处于裸机开发，想提高自己，希望多和大家聊一聊，了解一下嵌入式行业的其他方面，例如RTOS，Linux应用开发，Linux驱动开发，还有一些开发经验等等</li>
<li>我也希望我总结的东西，能帮助后来者，如果需要转载或者其他，可以联系我，谢谢。</li>
</ol>
<h1 id="一-基础部分">一、基础部分</h1>
<h2 id="11-c语言未完成">1.1 C语言【未完成】</h2>
<h2 id="12-c语言编写规范完成待完善">1.2 C语言编写规范【完成，待完善】</h2>
<p><a href="https://feiling4.github.io/post/c-yu-yan-bian-xie-gui-fan/">C语言编写规范</a></p>
<h2 id="13-编译器未完成">1.3 编译器【未完成】</h2>
<h2 id="14-微机组成完成待完善">1.4 微机组成【完成，待完善】</h2>
<p><a href="https://feiling4.github.io/post/wei-ji-zu-cheng/">微机组成</a></p>
<h2 id="15-常见概念未完成">1.5 常见概念【未完成】</h2>
<h1 id="二-查找资料">二、查找资料</h1>
<h2 id="21-芯片datasheet查找">2.1 芯片datasheet查找</h2>
<h2 id="22-mcu参考手册查找">2.2 MCU参考手册查找</h2>
<h1 id="三-代码阅读">三、代码阅读</h1>
<h2 id="31-如何阅读他人源码未完成">3.1 如何阅读他人源码【未完成】</h2>
<h2 id="32-如何整理吸收他人源码有用的部分未完成">3.2 如何整理吸收他人源码有用的部分【未完成】</h2>
<h1 id="四-mcu相关">四、MCU相关</h1>
<h2 id="41-mcu的datasheet阅读未完成">4.1 MCU的datasheet阅读【未完成】</h2>
<h2 id="42-mcu参考手册阅读和使用未完成">4.2 MCU参考手册阅读和使用【未完成】</h2>
<h1 id="五-项目开发">五、项目开发</h1>
<h2 id="51-项目文件夹和对应的用途未完成">5.1 项目文件夹和对应的用途【未完成】</h2>
<h2 id="52-项目开发流程未完成">5.2 项目开发流程【未完成】</h2>
<h2 id="53-项目日志模板未完成">5.3 项目日志模板【未完成】</h2>
<h2 id="54-项目开发问题记录未完成">5.4 项目开发问题记录【未完成】</h2>
<h2 id="55-项目进度把握未完成">5.5 项目进度把握【未完成】</h2>
<h2 id="56-项目总结归纳未完成">5.6 项目总结归纳【未完成】</h2>
<h1 id="六-pcb设计未完成">六、PCB设计【未完成】</h1>
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?cb0e797a461f8a2fbd655645afbf4a55";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
]]></content>
    </entry>
</feed>